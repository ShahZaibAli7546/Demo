@model Demo.Models.WeekendHalfDaySetup

@{
    ViewData["Title"] = "Create Weekend & Half Day Setup";
    Layout = "~/Views/Shared/_ControlPanelLayout.cshtml";
    var days = Enum.GetValues(typeof(DayOfWeek)).Cast<DayOfWeek>();
    var serializedBatches = System.Text.Json.JsonSerializer.Serialize(ViewBag.Batches);
}

<h2 class="text-primary mb-4">📝 Weekend & Half Day Setup</h2>

<form asp-action="Create" method="post">
    <div class="row mb-3">
        <div class="col-md-4">
            <label asp-for="CampusId" class="form-label"></label>
            <select asp-for="CampusId" asp-items="ViewBag.Campuses" class="form-select"></select>
        </div>
        <div class="col-md-4">
            <label asp-for="StartDate" class="form-label"></label>
            <input asp-for="StartDate" class="form-control" type="date" />
        </div>
        <div class="col-md-4">
            <label asp-for="EndDate" class="form-label"></label>
            <input asp-for="EndDate" class="form-control" type="date" />
        </div>
    </div>

    <div class="mb-3">
        <label class="form-label fw-bold">Weekend Days</label>
        <div class="d-flex flex-wrap gap-2">
            @foreach (var day in days)
            {
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" name="WeekendDays" value="@day"
                           @(Model?.WeekendDays?.Contains(day) == true ? "checked" : "") />
                    <label class="form-check-label">@day</label>
                </div>
            }
        </div>
    </div>

    <div class="mb-3">
        <label class="form-label fw-bold">Half Day Weekdays</label>
        <div class="d-flex flex-wrap gap-2">
            @foreach (var day in days)
            {
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" name="HalfDayWeekdays" value="@day"
                           @(Model?.HalfDayWeekdays?.Contains(day) == true ? "checked" : "") />
                    <label class="form-check-label">@day</label>
                </div>
            }
        </div>
    </div>

    <div class="batch-group mb-2 d-flex gap-2">
        <select name="SelectedBatchIds" class="form-select batch-select">
            @foreach (var batch in (List<SelectListItem>)ViewBag.Batches)
            {
                <option value="@batch.Value">@batch.Text</option>
            }
        </select>
        <button type="button" class="btn btn-success add-batch">+</button>
    </div>


    <button type="submit" class="btn btn-primary">💾 Save</button>
    <a asp-action="Index" class="btn btn-secondary ms-2">Back</a>
</form>

@section Scripts {
    <script>
        const batches = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(ViewBag.Batches));
        console.log("Loaded Batches: ", batches); // 👈 ADD THIS LINE
        document.addEventListener('DOMContentLoaded', () => {
            const container = document.getElementById('batch-container');
            renderAllSelects();

            container.addEventListener('click', function (e) {
                if (e.target.classList.contains('add-batch')) {
                    const div = document.createElement('div');
                    div.className = "batch-group mb-2 d-flex gap-2";

                    const select = document.createElement('select');
                    select.name = "SelectedBatchIds";
                    select.className = "form-select batch-select";

                    const removeBtn = document.createElement('button');
                    removeBtn.type = "button";
                    removeBtn.className = "btn btn-danger remove-batch";
                    removeBtn.textContent = "−";

                    div.appendChild(select);
                    div.appendChild(removeBtn);
                    container.appendChild(div);

                    renderAllSelects();
                }

                if (e.target.classList.contains('remove-batch')) {
                    e.target.parentElement.remove();
                    renderAllSelects();
                }
            });

            container.addEventListener('change', function (e) {
                if (e.target.classList.contains('batch-select')) {
                    renderAllSelects();
                }
            });

            function renderAllSelects() {
                const selectedValues = Array.from(container.querySelectorAll('.batch-select'))
                    .map(s => s.value).filter(v => v !== "");

                const selects = container.querySelectorAll('.batch-select');
                selects.forEach(select => {
                    const currentValue = select.value;
                    select.innerHTML = "";

                    const defaultOpt = document.createElement('option');
                    defaultOpt.text = "-- Select Batch --";
                    defaultOpt.disabled = true;
                    defaultOpt.selected = currentValue === "";
                    defaultOpt.value = "";
                    select.appendChild(defaultOpt);

                    batches.forEach(batch => {
                        const opt = document.createElement('option');
                        opt.value = batch.value;
                        opt.text = batch.text;

                        if (selectedValues.includes(batch.value) && batch.value !== currentValue) {
                            opt.disabled = true;
                        }

                        if (batch.value === currentValue) {
                            opt.selected = true;
                        }

                        select.appendChild(opt);
                    });
                });
            }
        });
    </script>
}
